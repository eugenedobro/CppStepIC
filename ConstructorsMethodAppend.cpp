/*
Реализованные в предыдущих заданиях конструкторы и деструктор берут на себя работу по управлению ресурсами. Теперь можно дополнить структуру String различными полезными методами. 

Для работы со строками можно придумать множество полезных методов (подумайте, какие методы пригодились бы вам и чего вам не хватает для их реализации). Примером такого метода может послужить метод append, который принимает в качестве аргумента экземпляр структуры String и добавляет копию строки, которую он хранит, в конец строки, у которой он был вызван. Ваша задача реализовать метод append.

При выполнении задания будьте аккуратны при работе с памятью — никаких утечек памяти быть не должно. А кроме того не забудьте, что size хранит размер без учета завершающего 0 символа. 

Требования к реализации: при реализации вы можете заводить любые вспомогательные функции и методы. В шаблоне вы увидите объявления уже известных вам конструкторов и деструкторов, реализовывать их заново не нужно, они уже реализованы. Вводить или выводить что-либо не нужно. Реализовывать main не нужно. Для работы с памятью не используйте функции из cstdlib (malloc, realloc, calloc и free).
*/

#include <cstddef> // size_t
#include <cstring> // strlen, strcpy
#include <algorithm>
#include <iostream>
#include <cassert> 
using namespace std;

struct String {
	String(const char *str = "");
	String(size_t n, char c);
	~String();

	void append(String &other) {
		char *str = new char[this->size + other.size + 1];
		strcat(str, this->str);
		strcat(str, other.str);
		delete [] this->str;
		this->str = str;
		this->size = strlen(this->str);
	}

	size_t size;
	char *str;
};
